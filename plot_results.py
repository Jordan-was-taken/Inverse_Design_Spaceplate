#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Plots results generated by TMM_sweep.py as a function of angle or wavelength

@author: orad
"""

import numpy as np


def plot_sweep_results(wavelengths, angles, R, T, A, max_fit_angle):
    import matplotlib
    import matplotlib.pyplot as plt

    matplotlib.rc('font', size=12)
    matplotlib.rc('text', usetex=False)

    # 4 scenarios:
    # 1. No sweep (why would you do that?)
    # 2. Sweep along wavelength only (for a fixed angle)
    # 3. Sweep along angle (for a fixed wavelength)
    # 4. Sweep along both angle and wavelength

    num_angles = angles.shape[0]
    num_wavelengths = wavelengths.shape[0]

    if num_angles > 1 and num_wavelengths > 1:
        fig = plt.figure()
        gs = plt.GridSpec(2, 2, figure=fig)
        ax0 = fig.add_subplot(gs[0, 0])
        ax1 = fig.add_subplot(gs[1, 0])
        ax2 = fig.add_subplot(gs[:, 1])

        plt.axes(ax0)
        plt.plot(angles, T[0, :], 'b', label='T')
        plt.plot(angles, R[0, :], 'r', label='R')
        plt.plot(angles, A[0, :], 'k', label='A')
        plt.xlim([angles.min(), angles.max()])
        plt.ylim([-0.05, 1.05])
        plt.xlabel('Incident angle (degrees)')
        plt.ylabel('Transmittance')
        plt.title(f'Wavelength = {wavelengths[0]} $\mu$m')
        plt.legend(bbox_to_anchor=(1.05, 1.05), fontsize='small')

        plt.axes(ax1)
        plt.plot(wavelengths, T[:, 0], 'b', label='T')
        plt.plot(wavelengths, R[:, 0], 'r', label='R')
        plt.plot(wavelengths, A[:, 0], 'k', label='A')
        plt.xlim([wavelengths.min(), wavelengths.max()])
        plt.ylim([-0.05, 1.05])
        plt.xlabel('Wavelength ($\mu{}$m)')
        plt.ylabel('Transmittance')
        plt.title(f'Incident angle = {angles[0]} degrees')

        plt.axes(ax2)
        plt.pcolormesh(wavelengths, angles, T.transpose(), shading='auto')
        plt.ylim([angles.min(), angles.max()])
        plt.ylabel('Incident angle (degrees)')
        plt.xlim([wavelengths.min(), wavelengths.max()])
        plt.xlabel('Wavelength ($\mu{}$m)')
        ax2.set_aspect(1. / ax2.get_data_ratio())
        plt.colorbar(label='Transmittance')

        plt.tight_layout()
        plt.savefig('2DSweep.png')

    elif num_angles > 1 and num_wavelengths == 1:
        fig, axs = plt.subplots(1)
        plt.axes(axs)
        plt.plot(angles, T.transpose(), 'b', label='T')
        plt.plot(angles, R.transpose(), 'r', label='R')
        plt.plot(angles, A.transpose(), 'k', label='A')
        plt.axvline(max_fit_angle, 0, 1, linestyle='--', color='k', linewidth=1, label='max fit angle')
        plt.xlim([angles.min(), angles.max()])
        plt.ylim([-0.05, 1.05])
        plt.xlabel('Incident angle (degrees)')
        plt.ylabel('Transmittance')
        plt.legend()
        plt.tight_layout()
        plt.savefig('AngleSweep.png')

    elif num_angles == 1 and num_wavelengths > 1:
        fig, axs = plt.subplots(1)
        plt.axes(axs)
        plt.plot(wavelengths, T, 'b', label='T')
        plt.plot(wavelengths, R, 'r', label='R')
        plt.plot(wavelengths, A, 'k', label='A')
        plt.xlim([wavelengths.min(), wavelengths.max()])
        plt.ylim([-0.05, 1.05])
        plt.xlabel('Wavelength ($\mu{}$m)')
        plt.ylabel('Transmittance')
        plt.legend()
        plt.tight_layout()
        plt.savefig('WavelengthSweep.png')

    plt.show()


if __name__ == "__main__":
    # %% Import and sanitize data
    import numpy as np

    TMM_data = np.load('TMM_sweep.npz')
    R = TMM_data['R']
    T = TMM_data['T']
    A = TMM_data['A']
    angles = TMM_data['angles']
    wavelengths = TMM_data['wavelengths']

    plot_sweep_results(wavelengths, angles, R, T, A)
